console.log('üß† background.js loaded with voice + translation support');
chrome.runtime.onMessage.addListener((request) => {
  console.log("üì© [DEBUG] Received action:", request.action, request);
});
chrome.runtime.onStartup.addListener(() => console.log("üöÄ Background started"));
chrome.runtime.onInstalled.addListener(() => console.log("üß© Extension installed"));

// ===============================
// üü¢ INITIAL SETUP
// ===============================
chrome.runtime.onInstalled.addListener(async () => {
  const systemLang = navigator.language?.split('-')[0] || 'en';
  await chrome.storage.sync.set({ userLanguage: systemLang });
  console.log('üåê Default language set:', systemLang);
});

// ===============================
// üåê TRANSLATION FUNCTIONS
// ===============================
let translatorCache = null;

async function detectLanguage(text) {
  console.log('üîç Detecting language...');
  if (!('LanguageDetector' in self)) throw new Error('Language Detector API not supported.');

  const availability = await LanguageDetector.availability();
  console.log('üì¶ Detector model availability:', availability);

  const detector = await LanguageDetector.create();
  const results = await detector.detect(text);
  console.log('üìä Detection results:', results);
  return results[0]?.detectedLanguage || 'en';
}

async function translateText(text, userLanguage) {
  console.log('üîÅ Translating text...');
  if (!('Translator' in self) || !('LanguageDetector' in self)) {
    throw new Error('Translation APIs not supported in this browser.');
  }

  const sourceLanguage = await detectLanguage(text);
  console.log(`üåç Detected: ${sourceLanguage} ‚Üí ${userLanguage}`);

  const availability = await Translator.availability({ sourceLanguage, targetLanguage: userLanguage });
  console.log('üì¶ Translator availability:', availability);

  if (availability !== 'available' && availability !== 'downloadable') {
    throw new Error(`Model unavailable for ${sourceLanguage} ‚Üí ${userLanguage}.`);
  }

  try {
    if (
      translatorCache &&
      translatorCache.sourceLanguage === sourceLanguage &&
      translatorCache.targetLanguage === userLanguage
    ) {
      console.log('‚ôªÔ∏è Reusing cached translator');
    } else {
      console.log('‚¨áÔ∏è Creating new translator...');
      translatorCache = await Translator.create({
        sourceLanguage,
        targetLanguage: userLanguage,
        monitor(m) {
          m.addEventListener('downloadprogress', (e) => {
            console.log(`üì∂ Model download progress: ${(e.loaded * 100).toFixed(1)}%`);
          });
        }
      });
    }
  } catch (err) {
    console.error('‚ùå Translator model creation failed:', err);
    throw new Error('Model not available or download failed. Please retry.');
  }

  const translated = await translatorCache.translate(text);
  console.log('‚úÖ Translation done.');
  return translated;
}

// ===============================
// üì© MESSAGE HANDLER
// ===============================
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì© Message received in background:', request.action);

  if (request.action === "translate_auto") {
    // Keep alive for async
    (async () => {
      const { userLanguage } = await chrome.storage.sync.get("userLanguage");
      console.log("üîß User target language:", userLanguage);

      if (request.isVoiceCommand) {
        console.log("üéß Voice command translation request received:", request.text);
        try {
          const translated = await translateCommandText(request.text);
          sendResponse({ success: true, result: translated });
        } catch (err) {
          console.error("‚ùå Voice command translation failed:", err);
          sendResponse({ success: false, error: err.message });
        }
        return;
      }

      // Normal translation
      try {
        const result = await translateText(request.text, request.targetLang || userLanguage);
        console.log("‚úÖ Sending translated result back");
        sendResponse({ success: true, result });
      } catch (err) {
        console.error("‚ùå Translation failed:", err);
        sendResponse({ success: false, error: err.message });
      }
    })();

    // <-- This keeps the service worker alive
    return true;
  }

  if (request.action === 'toggle_voice') {
    toggleVoiceRecognition?.();
  }

  if (request.action === 'show_commands') {
    showCommandOverlay?.();
  }

  return true; // Always keep async channel open
});

// ===============================
// üéß KEYBOARD SHORTCUT + COMMAND SCREEN
// ===============================
chrome.commands.onCommand.addListener(async (command) => {
  console.log('‚å®Ô∏è Shortcut pressed:', command);
  if (command === 'toggle_voice_mode') {
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
    if (tab?.id) {
      // Send toggle to active tab ‚Äî content script handles it
      chrome.tabs.sendMessage(tab.id, { action: 'toggle_voice' });
    }
  }
});

// ===============================
// üß© SHOW COMMAND OVERLAY HANDLER
// ===============================
async function showCommandOverlay() {
  const { userLanguage } = await chrome.storage.sync.get("userLanguage");
  const translations = {
    en: {
      title: "üéôÔ∏è Voice Commands",
      commands: [
        "Say 'read' to start reading",
        "Say 'pause' to pause",
        "Say 'stop' to stop reading",
        "Say 'translate' to translate this page",
        "Say 'show commands' to display this list"
      ]
    },
    hi: {
      title: "üéôÔ∏è ‡§µ‡•â‡§Ø‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏",
      commands: [
        "'‡§™‡§¢‡§º‡•ã' ‡§ï‡§π‡•á‡§Ç ‡§™‡§¢‡§º‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è",
        "'‡§∞‡•Å‡§ï‡•ã' ‡§ï‡§π‡•á‡§Ç ‡§∞‡•ã‡§ï‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è",
        "'‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã' ‡§ï‡§π‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è",
        "'‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡§∞‡•ã' ‡§ï‡§π‡•á‡§Ç ‡§™‡•É‡§∑‡•ç‡§† ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è",
        "'‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§¶‡§ø‡§ñ‡§æ‡§ì' ‡§ï‡§π‡•á‡§Ç ‡§Ø‡§π ‡§∏‡•Ç‡§ö‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è"
      ]
    },
    es: {
      title: "üéôÔ∏è Comandos de voz",
      commands: [
        "Di 'leer' para empezar a leer",
        "Di 'pausa' para pausar",
        "Di 'detener' para detener la lectura",
        "Di 'traducir' para traducir esta p√°gina",
        "Di 'mostrar comandos' para ver esta lista"
      ]
    },
    zh: {
      title: "üéôÔ∏è ËØ≠Èü≥ÂëΩ‰ª§",
      commands: [
        "ËØ¥‚ÄúËØª‚ÄùÂºÄÂßãÊúóËØª",
        "ËØ¥‚ÄúÊöÇÂÅú‚ÄùÊöÇÂÅúÊúóËØª",
        "ËØ¥‚ÄúÂÅúÊ≠¢‚ÄùÁªìÊùüÊúóËØª",
        "ËØ¥‚ÄúÁøªËØë‚ÄùÁøªËØëÊ≠§È°µÈù¢",
        "ËØ¥‚ÄúÊòæÁ§∫ÂëΩ‰ª§‚ÄùÊòæÁ§∫Ê≠§ÂàóË°®"
      ]
    }
  };

  const text = translations[userLanguage] || translations.en;

  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    if (tabs[0]?.id) {
      chrome.tabs.sendMessage(tabs[0].id, { action: "show_commands", text });
    }
  });
}
// background.js (Manifest V3 service worker)
// In background.js, update the handleCheckGemini function:

async function handleCheckGemini(tabId) {
  try {
    console.log("üîç Checking Gemini availability for tab:", tabId);
    
    const results = await chrome.scripting.executeScript({
      target: { tabId: tabId },
      world: 'MAIN',
      func: async () => {
        console.log("üåç Running in MAIN world");
        console.log("window.ai exists:", !!window.ai);
        
        if (!window.ai) {
          return { 
            success: false, 
            reason: 'window.ai not available',
            debug: { windowAi: typeof window.ai }
          };
        }
        
        console.log("window.ai.languageModel exists:", !!window.ai.languageModel);
        
        if (!window.ai.languageModel) {
          return { 
            success: false, 
            reason: 'window.ai.languageModel not available',
            debug: { 
              aiKeys: Object.keys(window.ai),
              languageModel: typeof window.ai.languageModel
            }
          };
        }
        
        try {
          console.log("üì° Checking availability...");
          const availability = await window.ai.languageModel.availability();
          console.log("‚úì Availability:", availability);
          
          // Return availability info even if not ready
          if (availability === 'after-download') {
            console.log("üì• Model needs download - attempting to trigger...");
            
            // Try to create session to trigger download
            try {
              const session = await window.ai.languageModel.create();
              window.__geminiSession = session;
              console.log("‚úÖ Session created! Model downloaded successfully");
              return { success: true, availability: 'readily' };
            } catch (error) {
              console.log("‚è≥ Download in progress...");
              return { 
                success: false, 
                reason: 'downloading',
                availability: 'after-download',
                error: error.message 
              };
            }
          }
          
          if (availability === 'readily') {
            // Try to create a session to verify it really works
            try {
              const session = await window.ai.languageModel.create();
              window.__geminiSession = session;
              console.log("‚úÖ Session created successfully");
              return { success: true, availability };
            } catch (error) {
              return { 
                success: false, 
                reason: 'session creation failed',
                availability,
                error: error.message 
              };
            }
          }
          
          return { 
            success: false, 
            reason: 'not readily available',
            availability 
          };
          
        } catch (error) {
          return { 
            success: false, 
            reason: 'availability check failed',
            error: error.message 
          };
        }
      }
    });
    
    const result = results[0].result;
    console.log("üìä Check result:", result);
    return result;
    
  } catch (error) {
    console.error("‚ùå Error executing script:", error);
    return { 
      success: false, 
      reason: 'script execution failed',
      error: error.message 
    };
  }


}


chrome.runtime.onMessage.addListener(async (req, sender, sendResponse) => {
  if (req.action === "translate_with_gemini") {
    const { text, userLanguage } = req;

    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });

      const results = await chrome.scripting.executeScript({
        target: { tabId: tab.id },
        world: "MAIN",
        func: async (text, userLanguage) => {
          const LM = window.ai?.languageModel || window.LanguageModel;
          if (!LM) {
            return { success: false, reason: "Language Model API not available in this context" };
          }

          // ‚úÖ Wait for model readiness (accept both available & readily)
          async function waitUntilReady(timeoutMs = 10000, intervalMs = 500) {
            const start = Date.now();
            while (Date.now() - start < timeoutMs) {
              const availability = LM.availability ? await LM.availability() : "readily";
              if (["available", "readily"].includes(availability)) return true;
              await new Promise((res) => setTimeout(res, intervalMs));
            }
            return false;
          }

          const ready = await waitUntilReady();
          if (!ready) {
            return { success: false, reason: "Language model not ready after waiting" };
          }

          console.log("‚úÖ Model ready. Creating session...");

          const session = await LM.create({
            expectedInputs: [{ type: "text", languages: ["en", userLanguage] }],
            expectedOutputs: [{ type: "text", languages: ["en"] }],
            outputLanguage: "en", // ‚úÖ prevents output language warning
            initialPrompts: [
              {
                role: "system",
                content: `
                  You are an AI assistant that translates and interprets spoken or written commands
                  into short, clear English command words.
                  Supported commands: read, pause, stop, translate, show commands, ask, summarise.
                  If multiple commands exist (like "read and then pause"), separate them with commas.
                  Always respond with only the English command(s) in lowercase, no explanations.
                `,
              },
            ],
          });

          console.log("üß† Session created. Sending prompt...");

          const result = await session.prompt(
            `
            User said (in ${userLanguage}): "${text}"
            Task: Detect if the text includes any actionable command
            and return the English commands only, separated by commas.
            `,
            { outputLanguage: "en" } // ‚úÖ enforce consistent output
          );

          console.log("‚úÖ Result:", result);
          return { success: true, result };
        },
        args: [text, userLanguage],
      });

      sendResponse(results[0].result);
    } catch (error) {
      console.error("‚ö†Ô∏è Gemini translation failed:", error);
      sendResponse({ success: false, error: error.message });
    }

    return true; // Keep the channel open for async sendResponse
  }
});
